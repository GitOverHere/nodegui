(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return m}));n(0);var a=n(173);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o={sidebar_label:"QPixmap",title:"QPixmap"},p=[{value:"Example",id:"example",children:[]},{value:"new QPixmap(imageUrl?)",id:"new-qpixmapimageurl",children:[]},{value:"Static Methods",id:"static-methods",children:[]},{value:"Instance Properties",id:"instance-properties",children:[]},{value:"Instance Methods",id:"instance-methods",children:[{value:"pixMap.load(imageUrl)",id:"pixmaploadimageurl",children:[]}]}],l={rightToc:p},c="wrapper";function m(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(c,i({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"The QPixmap class helps hold an image in the form of off-screen image representation.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"This class is a JS wrapper around Qt's ",Object(a.b)("a",i({parentName:"strong"},{href:"https://doc.qt.io/qt-5/qpixmap.html"}),"QPixmap class"))),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"QPixmap")," provides ability to store an image in the memory."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"QPixmap inherits from ",Object(a.b)("a",i({parentName:"strong"},{href:"/docs/api/Component"}),"Component"))),Object(a.b)("h3",{id:"example"},"Example"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-javascript"}),'const { QPixmap } = require("@nodegui/nodegui");\n\nconst imageUrl = "path/to/png";\nconst pixMap = new QPixmap(imageUrl);\n')),Object(a.b)("h3",{id:"new-qpixmapimageurl"},Object(a.b)("inlineCode",{parentName:"h3"},"new QPixmap(imageUrl?)")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"imageUrl")," string (",Object(a.b)("em",{parentName:"li"},"optional"),"). Absolute path of the image that needs to be loaded in the memory.")),Object(a.b)("h2",{id:"static-methods"},"Static Methods"),Object(a.b)("p",null,"QPixmap can access all the static methods defined in ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/api/Component"}),"Component")),Object(a.b)("h2",{id:"instance-properties"},"Instance Properties"),Object(a.b)("p",null,"QPixmap can access all the instance properties defined in ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/api/Component"}),"Component")),Object(a.b)("h2",{id:"instance-methods"},"Instance Methods"),Object(a.b)("p",null,"QPixmap can access all the instance methods defined in ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/api/Component"}),"Component")),Object(a.b)("p",null,"Additionally it also has the following instance methods:"),Object(a.b)("h3",{id:"pixmaploadimageurl"},Object(a.b)("inlineCode",{parentName:"h3"},"pixMap.load(imageUrl)")),Object(a.b)("p",null,"loads an image from the url into memory as a Pixmap.\nreturns true if load was successful otherwise returns false."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"imageUrl")," string (",Object(a.b)("em",{parentName:"li"},"optional"),"). Absolute path of the image that needs to be loaded in the memory.")),Object(a.b)("h4",{id:"pixmapsavefilename-format"},Object(a.b)("inlineCode",{parentName:"h4"},"pixMap.save(fileName, format)")),Object(a.b)("p",null,"Saves the pixmap to the file with the given fileName using the specified image file format and quality factor. Returns ",Object(a.b)("inlineCode",{parentName:"p"},"true")," if successful; otherwise returns false."),Object(a.b)("p",null,"If format is 0, an image format will be chosen from fileName's suffix."),Object(a.b)("p",null,"See also ",Object(a.b)("a",i({parentName:"p"},{href:"https://doc.qt.io/qt-5/qpixmap.html#reading-and-writing-image-files"}),"Reading and Writing Image Files."),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"fileName")," string."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"format")," string. (",Object(a.b)("em",{parentName:"li"},"optional"),").")),Object(a.b)("h4",{id:"pixmapscaledwidth-height-aspectratiomode"},Object(a.b)("inlineCode",{parentName:"h4"},"pixMap.scaled(width, height, aspectRatioMode?)")),Object(a.b)("p",null,"Scales the pixmap to provided height and width with respect to aspectRatioMode.\nThis method doesnt mutate this pixmap and rather returns a new pixmap with new height and width."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"width")," number. Width in pixels for new pixmap."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"height")," number. Height in pixels for new pixmap."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"aspectRatioMode")," AspectRatioMode (",Object(a.b)("em",{parentName:"li"},"optional"),"). Specifies how scaling should happen. ",Object(a.b)("a",i({parentName:"li"},{href:"/docs/api/QtEnums"}),"AspectRatio is an enum from Qt"))))}m.isMDXComponent=!0},173:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return s}));var a=n(0),i=n.n(a),r=i.a.createContext({}),o=function(e){var t=i.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},p=function(e){var t=o(e.components);return i.a.createElement(r.Provider,{value:t},e.children)};var l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),m=o(n),s=a,b=m[p+"."+s]||m[s]||c[s]||r;return n?i.a.createElement(b,Object.assign({},{ref:t},l,{components:n})):i.a.createElement(b,Object.assign({},{ref:t},l))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[l]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);